<?php
/**
 * Created by PhpStorm.
 * User: mrozk
 * Date: 4/28/14
 * Time: 11:47 AM
 */

use DDelivery\Order\DDeliveryProduct;
use DDelivery\Adapter\PluginFilters;
use DDelivery\Order\DDStatusProvider;
//ini_set("display_errors", "1");
//error_reporting(E_ALL);

class IntegratorShop extends PluginFilters {

    public $cmsSettings;

    protected  $cmsOrderStatus = array( DDStatusProvider::ORDER_IN_PROGRESS => 0,
                                        DDStatusProvider::ORDER_CONFIRMED => 2,
                                        DDStatusProvider::ORDER_IN_STOCK => 14,
                                        DDStatusProvider::ORDER_IN_WAY => 15,
                                        DDStatusProvider::ORDER_DELIVERED => 16,
                                        DDStatusProvider::ORDER_RECEIVED => 17,
                                        DDStatusProvider::ORDER_RETURN => 20,
                                        DDStatusProvider::ORDER_CUSTOMER_RETURNED => 21,
                                        DDStatusProvider::ORDER_PARTIAL_REFUND => 22,
                                        DDStatusProvider::ORDER_RETURNED_MI => 2,
                                        DDStatusProvider::ORDER_WAITING => 25,
                                        DDStatusProvider::ORDER_CANCEL => 26 );

    public function __construct()
    {
        /*
        $_classPath="../../../../";
        $PHPShopModules = new PHPShopModules($_classPath."modules/");
        $PHPShopOrm = new PHPShopOrm($PHPShopModules->getParam("base.ddelivery.ddelivery_system"));
        print_r($PHPShopModules->getParam("base.ddelivery.ddelivery_system"));
        $this->cmsSettings = $PHPShopOrm->select();

        */

        $query = 'SELECT * FROM phpshop_modules_ddelivery_system WHERE id = 1';
        $cur = mysql_query($query);
        $this->cmsSettings = mysql_fetch_assoc($cur);


    }


    /**
     * Настройки базы данных
     * @return array
     */
    public function getDbConfig()
    {
        $user_db = $GLOBALS['SysValue']['connect']['user_db'];
        $pass_db = $GLOBALS['SysValue']['connect']['pass_db'];
        $dbase = $GLOBALS['SysValue']['connect']['dbase'];
        $host = $GLOBALS['SysValue']['connect']['host'];

        return array(
            'pdo' => new \PDO('mysql:host=' . $host . ';dbname=' . $dbase , $user_db, $pass_db, array(\PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8")),
            'prefix' => '',
        );

        return array(
            'type' => self::DB_SQLITE,
            'dbPath' => $this->getPathByDB(),
            'prefix' => '',
        );

        return array(
            'type' => self::DB_MYSQL,
            'dsn' => 'mysql:host=localhost;dbname=ddelivery',
            'user' => 'root',
            'pass' => '0',
            'prefix' => '',
        );
    }

    public function isStatusToSendOrder( $status )
    {
        if( $this->cmsSettings['status'] == $status )
        {
            return true;
        }
        return false;
    }
    /**
     * Верните true если нужно использовать тестовый(stage) сервер
     * @return bool
     */
    public function isTestMode()
    {
        if ( $this->cmsSettings['rezhim']  == '0')
        {
            return true;
        }
        elseif($this->cmsSettings['rezhim']  == '1')
        {
            return false;
        }
        // TODO: Change the autogenerated stub
    }

    /**
     * Возвращает товары находящиеся в корзине пользователя, будет вызван один раз, затем закеширован
     * @return DDeliveryProduct[]
     */
    protected function _getProductsFromCart()
    {

        $products = array();
        // Корзина
        $PHPShopCart = new PHPShopCart();
        $productsCart = $PHPShopCart->getArray();


        if( count( $productsCart ) )
        {
            foreach($productsCart as $item)
            {

                $PHPShopProduct = new PHPShopProduct($item[id]);


                $cartWidth = $PHPShopProduct->getParam("option1");
                $cartLenght = $PHPShopProduct->getParam("option2");
                $cartHeight = $PHPShopProduct->getParam("option3");
                /*
                $vendor_array =  unserialize( $PHPShopProduct->objRow['vendor_array'] ) ;
                //$params = $this->cmsSettings['width'];
                if( is_array( $vendor_array ) )
                {
                    if( array_key_exists($this->cmsSettings['width'], $vendor_array) )
                    {
                        $param = (int)$vendor_array[$this->cmsSettings['width']][0];
                        $cur = mysql_query('SELECT name FROM phpshop_sort WHERE id = ' . $param);
                        $cartWidth = (int)mysql_fetch_array($cur)[0];
                        //print_r($cartWidth);
                    }

                    if( array_key_exists($this->cmsSettings['length'], $vendor_array) )
                    {
                        $param = (int)$vendor_array[$this->cmsSettings['length']][0];
                        $cur = mysql_query('SELECT name FROM phpshop_sort WHERE id = ' . $param);
                        $cartLenght = (int)mysql_fetch_array($cur)[0];
                    }

                    if( array_key_exists($this->cmsSettings['height'], $vendor_array) )
                    {
                        $param = (int)$vendor_array[$this->cmsSettings['height']][0];
                        $cur = mysql_query('SELECT name FROM phpshop_sort WHERE id = ' . $param);
                        $cartHeight = (int)mysql_fetch_array($cur)[0];
                    }
                }
               // mysql_query('SELECT name FROM phpshop_sort WHERE id IN()');
                */

                $cartWeight = $item['weight'] / 1000;


                $width = (empty($cartWidth)?$this->cmsSettings['def_width']:$cartWidth);
                $lenght = (empty($cartLenght)?$this->cmsSettings['def_lenght']:$cartLenght);
                $height = (empty($cartHeight)?$this->cmsSettings['def_height']:$cartHeight);
                $weight = (empty($cartWeight)?$this->cmsSettings['def_weight']:$cartWeight);

                $products[] = new \DDelivery\Order\DDeliveryProduct( $item['id'],
                    $width, $height, $lenght, $weight,
                    $item['price'], $item['num'], $item['name']);


            }
        }
        

        return $products;
    }

    /**
     * Меняет статус внутреннего заказа cms
     *
     * @param $cmsOrderID - id заказа
     * @param $status - статус заказа для обновления
     *
     * @return bool
     */
    public function setCmsOrderStatus($cmsOrderID, $status)
    {
        $orders = $GLOBALS['SysValue']['base']['orders'];
        $query = 'UPDATE ' . $orders . ' SET statusi = ' . $status . ' WHERE id = ' . $cmsOrderID;
        $cur = mysql_query($query);
        $this->cmsSettings = mysql_fetch_assoc($cur);
    }

    public function getOrderIDsByStatus()
    {
        $orders = $GLOBALS['SysValue']['base']['orders'];

        $query = 'SELECT id FROM ' . $orders . ' WHERE statusi =' . $this->cmsSettings['status'];
        $cur = mysql_query($query);
        $result = array();
        while ($k = mysql_fetch_array($cur))
        {
            $result[] = $k[0];
        }

        return $result;
    }

    /**
     * Возвращает API ключ, вы можете получить его для Вашего приложения в личном кабинете
     * @return string
     */
    public function getApiKey()
    {
        return $this->cmsSettings['api'];
    }

    /**
     * Должен вернуть url до каталога с статикой
     * @return string
     */
    public function getStaticPath()
    {
        return '../html/';
    }

    /**
     * URL до скрипта где вызывается DDelivery::render
     * @return string
     */
    public function getPhpScriptURL()
    {
        // Тоесть до этого файла
        return 'ajax.php';
    }

    /**
     * Возвращает путь до файла базы данных, положите его в место не доступное по прямой ссылке
     * @return string
     */
    public function getPathByDB()
    {
        return __DIR__.'/../db/db.sqlite';
    }

    /**
     * Метод будет вызван когда пользователь закончит выбор способа доставки
     *
     * @param int $orderId
     * @param \DDelivery\Order\DDeliveryOrder $order
     * @param bool $customPoint Если true, то заказ обрабатывается магазином
     * @return void
     */
    public function onFinishChange($orderId, \DDelivery\Order\DDeliveryOrder $order, $customPoint)
    {
        if($customPoint){
            // Это условие говорит о том что нужно обрабатывать заказ средствами CMS
        }else{
            // Запомни id заказа
        }

    }

    /**
     * Какой процент от стоимости страхуется
     * @return float
     */
    public function getDeclaredPercent()
    {
        return $this->cmsSettings['declared'];
    }

    /**
     * Должен вернуть те компании которые НЕ показываются в курьерке
     * см. список компаний в DDeliveryUI::getCompanySubInfo()
     * @return int[]
     */
    public function filterCompanyPointCourier()
    {
        $cur_companies = unserialize( $this->cmsSettings['cur_companies'] );
        if( empty( $cur_companies ) )
        {
            $res = array();
        }
        else
        {
            $res = array_values($cur_companies) ;

        }
        return $res;
        // TODO: Implement filterCompanyPointCourier() method.
    }

    /**
     * Должен вернуть те компании которые НЕ показываются в самовывозе
     * см. список компаний в DDeliveryUI::getCompanySubInfo()
     * @return int[]
     */
    public function filterCompanyPointSelf()
    {
        $cur_companies = unserialize( $this->cmsSettings['pvz_companies'] );
        if( empty( $cur_companies ) )
        {
            $res = array();
        }
        else
        {
            $res = array_values($cur_companies) ;

        }
        return $res;
        // TODO: Implement filterCompanyPointSelf() method.
    }

    /**
     * Возвращаем способ оплаты константой PluginFilters::PAYMENT_, предоплата или оплата на месте. Курьер
     * @return int
     */
    public function filterPointByPaymentTypeCourier()
    {
        return $this->cmsSettings['payment'];
        /*
        return self::PAYMENT_POST_PAYMENT;
        // выбираем один из 3 вариантов(см документацию или комменты к констатам)
        return self::PAYMENT_POST_PAYMENT;
        return self::PAYMENT_PREPAYMENT;
        return self::PAYMENT_NOT_CARE;
        */
        // TODO: Implement filterPointByPaymentTypeCourier() method.
    }

    /**
     * Возвращаем способ оплаты константой PluginFilters::PAYMENT_, предоплата или оплата на месте. Самовывоз
     * @return int
     */
    public function filterPointByPaymentTypeSelf()
    {
        return $this->cmsSettings['payment'];
        //return self::PAYMENT_POST_PAYMENT;
        // выбираем один из 3 вариантов(см документацию или комменты к констатам)
        /*
        return self::PAYMENT_POST_PAYMENT;
        return self::PAYMENT_PREPAYMENT;
        return self::PAYMENT_NOT_CARE;
        // TODO: Implement filterPointByPaymentTypeSelf() method.
        */
    }
    public function getClientLastName() {
        return '';
    }
    /**
     * Если true, то не учитывает цену забора
     * @return bool
     */
    public function isPayPickup()
    {
        $zabor = (int)$this->cmsSettings['zabor'];
        if( $zabor ) return true;
        else         return false;
        // TODO: Implement isPayPickup() method.
    }

    /**
     * Метод возвращает настройки оплаты фильтра которые должны быть собраны из админки
     *
     * @return array
     */
    public function getIntervalsByPoint()
    {
        $result = array();
        if( !empty( $this->cmsSettings['from1'] ) )
        {
            $result[] = array('min' => $this->cmsSettings['from1'], 'max'=>$this->cmsSettings['to1'],
                              'type'=>$this->cmsSettings['method1'], 'amount'=>$this->cmsSettings['methodval1']);
        }
        if( !empty( $this->cmsSettings['from2'] ) )
        {
            $result[] = array('min' => $this->cmsSettings['from2'], 'max'=>$this->cmsSettings['to2'],
                              'type'=>$this->cmsSettings['method2'], 'amount'=>$this->cmsSettings['methodval2']);
        }
        if( !empty( $this->cmsSettings['from3'] ) )
        {
            $result[] = array('min' => $this->cmsSettings['from3'], 'max'=>$this->cmsSettings['to3'],
                              'type'=>$this->cmsSettings['method3'], 'amount'=>$this->cmsSettings['methodval3']);
        }
        return $result;
        /*
        return array(
            array('min' => 0, 'max'=>100, 'type'=>self::INTERVAL_RULES_MARKET_AMOUNT, 'amount'=>30),
            array('min' => 100, 'max'=>200, 'type'=>self::INTERVAL_RULES_CLIENT_ALL, 'amount'=>60),
            array('min' => 300, 'max'=>400, 'type'=>self::INTERVAL_RULES_MARKET_PERCENT, 'amount'=>3),
            array('min' => 1000, 'max'=>null, 'type'=>self::INTERVAL_RULES_MARKET_ALL),
        );
        */
    }

    /**
     * Тип округления
     * @return int
     */
    public function aroundPriceType()
    {
        switch ($this->cmsSettings['okrugl'])
        {
            case '0': return self::AROUND_FLOOR;
            case '1': return self::AROUND_CEIL;
            case '2': return self::AROUND_ROUND;
            default : return self::AROUND_ROUND;
        }
        //return self::AROUND_ROUND; // self::AROUND_FLOOR, self::AROUND_CEIL
    }

    /**
     * Шаг округления
     * @return float
     */
    public function aroundPriceStep()
    {
        $this->cmsSettings['shag'];
        return $this->cmsSettings['shag']; // До 50 копеек
        // TODO: Implement aroundPriceStep() method.
    }

    /**
     * описание собственных служб доставки
     * @return string
     */
    public function getCustomPointsString()
    {
        return $this->cmsSettings['custom_point'];
    }

    /**
     * Если вы знаете имя покупателя, сделайте чтобы оно вернулось в этом методе
     * @return string|null
     */
    public function getClientFirstName() {
        return '';
    }



    /**
     * Если вы знаете телефон покупателя, сделайте чтобы оно вернулось
     * в этом методе. 10 символов, например 9211234567
     *
     *@return string|null
     */
    public function getClientPhone() {
        return '';
    }

    /**
     * Верни массив Адрес, Дом, Корпус, Квартира. Если не можешь можно вернуть все в одном поле и настроить через get*RequiredFields
     * @return string[]
     */
    public function getClientAddress() {
        return array(/*'Адресx','Домx', 'Корпусx','Квартираx'*/);
    }

    /**
     * Верните id города в системе DDelivery
     * @return int
     */
    public function getClientCityId()
    {
        // Если нет информации о городе, оставьте вызов родительского метода.
        return parent::getClientCityId();
    }

    /**
     * Возвращает поддерживаемые магазином способы доставки
     * @return array
     */
    public function getSupportedType()
    {
        if( $this->cmsSettings['type'] == '0' )
        {
            return array(
                \DDelivery\Sdk\DDeliverySDK::TYPE_COURIER,
                \DDelivery\Sdk\DDeliverySDK::TYPE_SELF
            );
        }
        elseif($this->cmsSettings['type'] == '1')
        {
            return array(
                \DDelivery\Sdk\DDeliverySDK::TYPE_SELF
            );
        }
        elseif($this->cmsSettings['type'] == '2')
        {
            return array(
                \DDelivery\Sdk\DDeliverySDK::TYPE_COURIER,
            );
        }
    }

    /**
     * Возвращает бинарную маску обязательных полей для курьера
     * Если редактирование не включено, но есть обязательность то поле появится
     * Если редактируемых полей не будет то пропустим шаг
     * @return int
     */
    public function getCourierRequiredFields()
    {
        // ВВести все обязательно, кроме корпуса
        return self::FIELD_EDIT_FIRST_NAME | self::FIELD_REQUIRED_FIRST_NAME | self::FIELD_EDIT_LAST_NAME | self::FIELD_REQUIRED_SECOND_NAME
        | self::FIELD_EDIT_PHONE | self::FIELD_REQUIRED_PHONE
        | self::FIELD_EDIT_ADDRESS | self::FIELD_REQUIRED_ADDRESS
        | self::FIELD_EDIT_ADDRESS_HOUSE | self::FIELD_REQUIRED_ADDRESS_HOUSE
        | self::FIELD_EDIT_ADDRESS_HOUSING
        | self::FIELD_EDIT_ADDRESS_FLAT;
    }

    /**
     * Возвращает бинарную маску обязательных полей для пунктов самовывоза
     * Если редактирование не включено, но есть обязательность то поле появится
     * Если редактируемых полей не будет то пропустим шаг
     * @return int
     */
    public function getSelfRequiredFields()
    {
        // Имя, фамилия, мобилка
        return self::FIELD_EDIT_FIRST_NAME | self::FIELD_REQUIRED_FIRST_NAME
        | self::FIELD_EDIT_LAST_NAME | self::FIELD_REQUIRED_SECOND_NAME
        | self::FIELD_EDIT_PHONE | self::FIELD_REQUIRED_PHONE;
    }
} 
